
(define make-ok
  (lambda (val)
    (cons "Ok" val)
  )
 )
 
(define make-error
  (lambda (msg)
    (cons "Failure" msg)
  )
 )

(define ok?
  (lambda (res)
    (if (pair? res) (eq? (car res) "Ok") #f) 
  )
 )

(define error?
  (lambda (res)
    (if (pair? res) (eq? (car res) "Failure") #f) 
  )
 )

(define result?
  (lambda (res)
    (if (pair? res) 
      (or (eq? (car res) "Ok") (eq? (car res) "Failure"))
      #f
    ) 
  )
 )

(define result->val
  (lambda (res)
    (if (result? res) (cdr res) (res))
  )
)

(define bind 
  (lambda (f) 
    (lambda (res)
      (if (result? res)
        (if (ok? res) 
          (f (result->val res))
          res
        )
        (f res)
      )
    ) 
  )
)

(define make-dict
  (lambda ()
    (list)
  )
)


(define list?
  (lambda (l) 
    (or (empty? l)
        (if (pair? l)
          (list? (cdr l))
          #f
        )
    )
  )
)

(define dict?
  (lambda (e)
    (if (list? e)
      (if (empty? e)
        #t
        (and (pair? (car e)) (dict? (cdr e)))
      )
      #f
    )
  )
)

(define get
  (lambda (dict k)
    (if (list? dict)
      (if (empty? dict)
        (make-error "Key not found")
        (if (eq? (car (car dict)) k) 
          (make-ok (cdr (car dict)))
          (get (cdr dict) k)
        )
      )
      (make-error "Key not found")
    )
  )
)


(define put-iter
  (lambda (dict k v)
    (if (empty? dict)
      (list (cons k v))
      (if (eq? (car (car dict)) k) 
        (cons (cons k v) (cdr dict))
        (cons (car dict) (put-iter (cdr dict) k v))
      )
    )

  )
)

(define put
  (lambda (dict k v)
    (if (list? dict)
      (make-ok (put-iter dict k v))
      (make-error "TODO")
    )
  )
)

(define map-dict
  (lambda (dict f)
    @TODO
  )
)

(define filter-dict
  (lambda (dict pred)
    @TODO
  )
)
